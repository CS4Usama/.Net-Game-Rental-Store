// <auto-generated />
using System;
using GameRentalStore.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameRentalStore.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameRentalStore.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Games", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "1975. Disaster strikes the Beira D oil rig off the coast of Scotland. Navigate the collapsing rig to save your crew from an otherworldly horror on the edge of all logic and reality.",
                            GenreId = 3,
                            Platform = "PC",
                            Quantity = 7,
                            ReleaseDate = new DateOnly(2024, 6, 18),
                            Title = "Still Wakes the Deep"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Burning with anger, The girl wages a one-woman war against the cult, taking them down cultist by cultist, bullet by bullet, until she reaches her true target: the leader.",
                            GenreId = 4,
                            Platform = "Nintendo Switch",
                            Quantity = 10,
                            ReleaseDate = new DateOnly(2024, 4, 9),
                            Title = "Children of the Sun"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Save the galaxy - one patient at a time! As the new director of Galacticare, you will build and manage a series of hospitals to keep your patients alive for as long as possible - for money!",
                            GenreId = 5,
                            Platform = "PC",
                            Quantity = 8,
                            ReleaseDate = new DateOnly(2024, 5, 23),
                            Title = "Galacticare"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Welcome to Botany Manor, a stately home in 19th century England. You play as its inhabitant Arabella Greene, a retired botanist.",
                            GenreId = 6,
                            Platform = "Xbox",
                            Quantity = 6,
                            ReleaseDate = new DateOnly(2024, 2, 9),
                            Title = "Botany Manor"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Stage dive into the heart of SoLA, the ultimate Californian music festival, built upon ancient grounds...",
                            GenreId = 3,
                            Platform = "Playstation",
                            Quantity = 9,
                            ReleaseDate = new DateOnly(2024, 3, 17),
                            Title = "Dead Island 2: SoLA"
                        });
                });

            modelBuilder.Entity("GameRentalStore.Models.GameMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameMedias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-1\\4a77a065-a27f-4c79-9d45-90a0e6c7015b.webp"
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            MediaType = "video",
                            MediaUrl = "https://www.youtube.com/embed/3svNksUg_BM"
                        },
                        new
                        {
                            Id = 3,
                            GameId = 1,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-1\\ea3d5b3c-c20a-4d4b-affc-0c4d0da61430.webp"
                        },
                        new
                        {
                            Id = 4,
                            GameId = 1,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-1\\0e07a077-5f67-4d7e-8c1e-863e5dcead70.webp"
                        },
                        new
                        {
                            Id = 5,
                            GameId = 1,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-1\\c6402a57-debe-48f6-8428-d60ad4997254.webp"
                        },
                        new
                        {
                            Id = 6,
                            GameId = 2,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-2\\e7378d53-6faa-47f8-8c67-b4ecfd9c41f9.webp"
                        },
                        new
                        {
                            Id = 7,
                            GameId = 2,
                            MediaType = "video",
                            MediaUrl = "https://www.youtube.com/embed/Jp4miWjVHtY"
                        },
                        new
                        {
                            Id = 8,
                            GameId = 2,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-2\\2ead7900-d473-47af-b367-93bb8a09c5f6.webp"
                        },
                        new
                        {
                            Id = 9,
                            GameId = 2,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-2\\94066954-7138-4a2e-924d-f149e300fb7a.webp"
                        },
                        new
                        {
                            Id = 10,
                            GameId = 2,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-2\\1ffb394b-aa03-44b4-a79a-bee9b771b05b.webp"
                        },
                        new
                        {
                            Id = 11,
                            GameId = 3,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-3\\8a2bb983-fda4-4015-9697-3442d9c989ee.webp"
                        },
                        new
                        {
                            Id = 12,
                            GameId = 3,
                            MediaType = "video",
                            MediaUrl = "https://www.youtube.com/embed/Qp0v7IVw4aA"
                        },
                        new
                        {
                            Id = 13,
                            GameId = 3,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-3\\77a06a13-f83a-40a0-af26-31ae3f8ef86e.webp"
                        },
                        new
                        {
                            Id = 14,
                            GameId = 3,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-3\\990afc77-95cd-41b5-9c28-4da1bf8a6688.webp"
                        },
                        new
                        {
                            Id = 15,
                            GameId = 3,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-3\\f5ad9b4e-08a0-453e-89eb-500aaf156685.webp"
                        },
                        new
                        {
                            Id = 16,
                            GameId = 4,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-4\\9972760f-bb59-4319-b145-357963e8f4a3.webp"
                        },
                        new
                        {
                            Id = 17,
                            GameId = 4,
                            MediaType = "video",
                            MediaUrl = "https://www.youtube.com/embed/vJcp6CMkUuA"
                        },
                        new
                        {
                            Id = 18,
                            GameId = 4,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-4\\9f30b7b1-aacb-42a9-a5f6-8473d7809567.webp"
                        },
                        new
                        {
                            Id = 19,
                            GameId = 4,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-4\\209c58e2-ff8d-4875-884e-f1e46e5e05af.webp"
                        },
                        new
                        {
                            Id = 20,
                            GameId = 4,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-4\\8d54d69b-2e58-4ea2-b71f-c6c9a10fc54b.webp"
                        },
                        new
                        {
                            Id = 21,
                            GameId = 5,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-5\\0cd268dc-36f5-488d-95e2-b2ce6c2791aa.webp"
                        },
                        new
                        {
                            Id = 22,
                            GameId = 5,
                            MediaType = "video",
                            MediaUrl = "https://www.youtube.com/embed/xC9FXqO5C2s"
                        },
                        new
                        {
                            Id = 23,
                            GameId = 5,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-5\\3a1fba0d-5b69-493f-8f3e-fc7572515f65.webp"
                        },
                        new
                        {
                            Id = 24,
                            GameId = 5,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-5\\ca3d1eb9-8750-495f-8337-ac4a92eda825.webp"
                        },
                        new
                        {
                            Id = 25,
                            GameId = 5,
                            MediaType = "image",
                            MediaUrl = "\\media\\games\\game-5\\c19de547-8615-4abd-a729-dca5d8fb601e.webp"
                        });
                });

            modelBuilder.Entity("GameRentalStore.Models.GameRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CartGameId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CartGameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameRatings", (string)null);
                });

            modelBuilder.Entity("GameRentalStore.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Role Playing"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 5,
                            Name = "Simulator"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 6,
                            Name = "Puzzle"
                        });
                });

            modelBuilder.Entity("GameRentalStore.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReplaced")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RentedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GameId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserPackageId");

                    b.ToTable("ShoppingCarts", (string)null);
                });

            modelBuilder.Entity("GameRentalStore.Models.SubscriptionPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GamesPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("MaxReplacePerMonth")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentNewReleasedGame")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPackages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GamesPerMonth = 2,
                            MaxReplacePerMonth = 0,
                            PackageName = "Basic",
                            RentNewReleasedGame = 0
                        },
                        new
                        {
                            Id = 2,
                            GamesPerMonth = 3,
                            MaxReplacePerMonth = 3,
                            PackageName = "Premium Max",
                            RentNewReleasedGame = 2
                        },
                        new
                        {
                            Id = 3,
                            GamesPerMonth = 2,
                            MaxReplacePerMonth = 2,
                            PackageName = "Premium",
                            RentNewReleasedGame = 1
                        });
                });

            modelBuilder.Entity("GameRentalStore.Models.UserPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("SubscribedDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalSubscriptionMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PackageId");

                    b.ToTable("UserPackages", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameRentalStore.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("GameRentalStore.Models.Game", b =>
                {
                    b.HasOne("GameRentalStore.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameRentalStore.Models.GameMedia", b =>
                {
                    b.HasOne("GameRentalStore.Models.Game", "Game")
                        .WithMany("GameMedias")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameRentalStore.Models.GameRating", b =>
                {
                    b.HasOne("GameRentalStore.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("GameRentalStore.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("CartGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRentalStore.Models.Game", "Game")
                        .WithMany("GameRatings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Game");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("GameRentalStore.Models.ShoppingCart", b =>
                {
                    b.HasOne("GameRentalStore.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRentalStore.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRentalStore.Models.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRentalStore.Models.UserPackage", "UserPackage")
                        .WithMany()
                        .HasForeignKey("UserPackageId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Game");

                    b.Navigation("SubscriptionPackage");

                    b.Navigation("UserPackage");
                });

            modelBuilder.Entity("GameRentalStore.Models.UserPackage", b =>
                {
                    b.HasOne("GameRentalStore.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRentalStore.Models.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameRentalStore.Models.Game", b =>
                {
                    b.Navigation("GameMedias");

                    b.Navigation("GameRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
